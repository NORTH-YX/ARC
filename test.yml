version: 0.1
component: build
timeoutInSeconds: 1800
shell: bash

steps:
  - type: Command
    name: "Install K8s and ZAP"
    command: |
      # Instalar kubectl
      mkdir -p $HOME/.kube
      cd $HOME
      mkdir -p k8s
      cd k8s
      wget https://dl.k8s.io/v1.31.2/bin/linux/amd64/kubectl
      chmod +x kubectl
      export PATH=$PATH:$HOME/k8s
      kubectl version --client

      # Configurar kubeconfig
      oci ce cluster create-kubeconfig --cluster-id ocid1.cluster.oc1.mx-queretaro-1.aaaaaaaayt4ltydknxnaxvp6gzsgh4sxzkstzoc65r4ppjo4ac54i5xmdcwa \
        --file $HOME/.kube/config \
        --region mx-queretaro-1 \
        --token-version 2.0.0 \
        --kube-endpoint PUBLIC_ENDPOINT
      export KUBECONFIG=$HOME/.kube/config

      # Instalar OWASP ZAP
      cd $HOME
      wget https://github.com/zaproxy/zaproxy/releases/download/v2.14.0/ZAP_2.14.0_unix.sh
      chmod +x ZAP_2.14.0_unix.sh
      ./ZAP_2.14.0_unix.sh -q -dir $HOME/zap
      export ZAP_PATH=$HOME/zap/ZAP_2.14.0
      export PATH=$PATH:$ZAP_PATH

  - type: Command
    name: "Get LoadBalancer IP"
    command: |
      echo "⏳ Esperando 30 segundos para que el LoadBalancer tenga IP..."
      sleep 30
      TARGET_IP=$(kubectl get svc --all-namespaces -o jsonpath='{.items[?(@.spec.type=="LoadBalancer")].status.loadBalancer.ingress[0].ip}')
      echo "✅ IP obtenida: $TARGET_IP"
      echo "TARGET_IP=$TARGET_IP" >> $OCI_OUTPUT_DIR/env_vars

  - type: Command
    name: "Run OWASP ZAP Scan"
    command: |
      source $OCI_OUTPUT_DIR/env_vars
      echo "Running OWASP ZAP against http://$TARGET_IP"
      $HOME/zap/ZAP_2.14.0/zap.sh -cmd -quickurl http://$TARGET_IP -quickout zap_report.html
